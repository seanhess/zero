[intro]: http://github.com/seanhess/zero/tree/master/README.mdown
[usecases]: http://github.com/seanhess/zero/tree/master/doc/UseCases.mdown
[examples]: http://github.com/seanhess/zero/tree/master/doc/Examples.mdown
[faq]: http://github.com/seanhess/zero/tree/master/doc/FAQ.mdown


# Frequently Asked Questions

* [Introduction to Zero][intro]
* [Use Cases][usecases]
* [Examples][examples]

### Is Zero an MVC framework?

No. MVC is a _pattern_ that helps you design an application in a time-tested way of separating concerns. MVC _frameworks_ help you implement the pattern in a particular way. Zero is a set of tools that could be used to follow MVC easily, or to create an MVC framework. You could also use an entirely different approach.

### What do the following terms mean?

* _interface_ - An interface is a way to describe _what_ an object does, without describing _how_ it does it. Object-oriented languages usually have an `interface` keyword that lets you define an interface explicitly. Zero allows you to describe an interface a different way, using another object, called a Facade.

* A _Facade_ - is a class that wraps, or proxies, another object - also called a Decorator. However, unlike most Decorators, a Facade does not add any functionality. It only defines the functions that are available to call, in effect, performing the same role as the interfaces built in to ActionScript.

* _Context_ - In Zero, an object's context is its place in the program. If you have one object, "a", which creates another object "b", b's context is a, because a created it. The context of a Facades is the object that created it. This lets the system know which object is requesting access to the dependency. By giving a context to Connect, we can give different implementations to different Facades.

* _implementation_ - An implementation is a class that specifies functionality for an interface, or in Zero, a class connected to a Facade.
