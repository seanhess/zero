## Frequently Asked Questions

[intro]: http://github.com/seanhess/zero/tree/master/README.mdown

[Introduction to Zero][intro]

### Is Zero an MVC framework?

No. MVC is a _pattern_ that helps you design an application in a time-tested way of separating concerns. MVC _frameworks_ help you implement the pattern in a particular way. 

Zero is a set of tools that you can use to implement MVC if you wish. However, it does not mandate using it. If you were to use Zero in an MVC setting, the MVC part would probably be a set of guidelines, not a particular framework. 

Zero can integrate with an MVC frameworks, but much of the functionality will be redundant. It provides tools that MVC frameworks do not. You could build a custom MVC framework using it. 

### What do the following terms mean?

* _interface_ - An interface is a way to describe _what_ an object does, without describing _how_ it does it. Object-oriented languages usually have an `interface` keyword that lets you define an interface explicitly. Zero allows you to describe an interface a different way, using another object, called a DependencyInterface.

* A _DependencyInterface_ - is a class that wraps, or proxies, another object - also called a Decorator. However, unlike most Decorators, a DependencyInterface does not add any functionality. It only defines the functions that are available to call, in effect, performing the same role as the interfaces built in to ActionScript.

* _Context_ - In Zero, an object's context is its place in the program. If you have one object, "a", which creates another object "b", b's context is a, because a created it. The context of a DependencyInterfaces is the object that created it. This lets the system know which object is requesting access to the dependency. By giving a context to Connect, we can give different implementations to different DependencyInterfaces.

* _implementation_ - An implementation is a class that specifies functionality for an interface, or in Zero, a class connected to a DependencyInterface.

