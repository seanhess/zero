## Glossary and Important Concepts

### interface

An interface is a way to describe _what_ an object does, without describing _how_ it does it. Object-oriented languages usually have an `interface` keyword that lets you define an interface explicitly. Zero allows you to describe an interface a different way, using another object, called a DependencyInterface.

### DependencyInterface

A DependencyInterface is a class that wraps, or proxies, another object - also called a Decorator. However, unlike most Decorators, a DependencyInterface does not add any functionality. It only defines the functions that are available to call, in effect, performing the same role as the interfaces built in to ActionScript.

### Context

In Zero, an object's context is its place in the program. If you have one object, "a", which creates another object "b", b's context is a, because a created it. 

The context of a DependencyInterfaces is the object that created it. This lets the system know which object is requesting access to the dependency.

By giving a context to Connect, we can give different implementations to different DependencyInterfaces.

### Implementation

An implementation is a class that specifies functionality for an interface, or in Zero, a class connected to a DependencyInterface.

