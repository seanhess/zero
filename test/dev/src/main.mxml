<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:module="dev.module.*" xmlns:zero="http://zero.seanhess.net/2009" xmlns:interfaces="dev.interfaces.*" xmlns:services="dev.services.*">

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			private function asdf():void
			{
				ilibrary.createBook("my book");
				
				trace("MAX ? " + ilibrary.maxBooks);
				ilibrary.maxBooks += 2;
				
				trace("MAX ? " + ilibrary.maxBooks);
				return;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!-- ROOT FILE -->
		<zero:Context id="context"/>
		
		<!--<WithContext context="{context}">-->
			<!--<Implement face="dev.ILibrary" instance="{library}" context="{context}"/>
			<Implement face="dev.ILibrary" factory="dev.Library" context="{context}"/>-->
		<!--</WithContext>-->
		
		<!-- 1) You want a single function to come from a mock object -->
		
		<!-- 2) Currently, services send an object as a parameter, you want to change ALL of them so they use JSON instead without modifying them -->
		
		<!-- 3) Services current make calls out to the server, but come back w/ XML. You want to intercept and come back with strongly typed objects instead -->
		
		<!-- CHILD FILE -->
		<interfaces:ILibrary id="ilibrary" implementation="{proxy}" />
		<interfaces:ILibrary id="listener" implementation="{proxy}" newBook="trace('newBook!')"/>
		
		<services:Library id="library"/>
		<zero:BasicProxy id="proxy" implementation="{library}"/>
		
	</fx:Declarations>
		
	<s:Button label="asdf" click="asdf()"/>
	<s:Button label="detach" click="listener.detach()"/>
	
</s:Application>