<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:module="dev.module.*" xmlns:zero="http://zero.seanhess.net/2009" xmlns:interfaces="dev.interfaces.*" xmlns:services="dev.services.*" initialize="init()">

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import net.seanhess.zero.context.Register;
			import net.seanhess.zero.context.Rule;
			
			import dev.interfaces.ILibrary;
			import dev.services.Library;
			
			private var register:Register = new Register();
			
			private function init():void
			{
				var rule:Rule = new Rule(Rule.IMPLEMENT, Library, "dev.interfaces.ILibrary");
				register.addRule(rule);
			}
			
			private function asdf():void
			{
				var library:ILibrary = new ILibrary(this);
					library.createBook("new book");
					
				// woot // 
			}
			
			private function two():void
			{
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!-- ROOT FILE -->
		<!--<zero:Context id="context"/>-->
		
		<!-- 0) You want to create an implementation -->
		
		<!--
		
		It's the "connect" tag that does the actual matching. 
		These guys need some way to out-prioritize each other / cancel each other 
		
		does hte connect tag handle keeping track of the base implementation?
		
		Yes. It creates an implementation based on what it understands. It then cancels the event. don't die on me son!
		I know you can pull through
		
		Or can you put in an Implement tag and Intercept tag separately?
		
		No... not sure, actually :(
		
		Implement can exist just fine on its own
		
		Intercept can also, I suppose. But I'd like it to edit the existing implementation... 
		
		<Connect context="{context}">
			<Implement match="dev.ILibrary" instance="{library}" context="{context}"/> can remove context att
			<Implement match="dev.ILibrary" factory="dev.Library" context="{context}"/>
		</Connect>
		-->
		
		<!-- 1) You want a single function to come from a mock object -->
		
		<!--
			<Intercept me="{this is a test}"/>
			This is stuch blarney... 
		-->
		
		
		<!-- 2) Convert xml service data to strongly-typed objects -->
		
		<!--
			Services: all have a send() method, and dispatch a "complete" event
			Translate: need to intercept the complete event, and dispatch a new one
		
			<Intercept face="dev.something.*" proxy="{translate}"/>
			
		-->
		
		<!-- 2) Change all Services -->
		
		<!-- CHILD FILE -->
		
	</fx:Declarations>
		
	<s:Button label="one" click="asdf()"/>
	<s:Button label="two" click="two()"/>
	<!--<s:Button label="detach" click="listener.implementation = null"/>
	<s:Button label="reattach" click="listener.implementation = proxy"/>-->
	
</s:Application>