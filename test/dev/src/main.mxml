<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:module="dev.module.*" xmlns:zero="http://zero.seanhess.net/2009" xmlns:interfaces="dev.interfaces.*" xmlns:services="dev.services.*">

	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			private function asdf():void
			{
				ilibrary.createBook("my book");
			}
			
			private function two():void
			{
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!-- ROOT FILE -->
		<zero:Context id="context"/>
		
		<!-- 0) You want to create an implementation -->
		
		<!--
		
		It's the "connect" tag that does the actual matching. 
		These guys need some way to out-prioritize each other / cancel each other 
		
		<Connect context="{context}">
			<Implement match="dev.ILibrary" instance="{library}" context="{context}"/> can remove context att
			<Implement match="dev.ILibrary" factory="dev.Library" context="{context}"/>
		</Connect>
		-->
		
		<!-- 1) You want a single function to come from a mock object -->
		
		<!--
			<Intercept 
		-->
		
		
		<!-- 2) Convert xml service data to strongly-typed objects -->
		
		<!--
			Services: all have a send() method, and dispatch a "complete" event
			Translate: need to intercept the complete event, and dispatch a new one
		
			<Intercept face="dev.something.*" proxy="{translate}"/>
			
		-->
		
		<!-- 2) Change all services -->
		
		<!-- CHILD FILE -->
		<interfaces:ILibrary id="ilibrary" implementation="{proxy}" />
		<interfaces:ILibrary id="listener" implementation="{proxy}" newBook="trace('newBook!')"/>
		
		<services:Library id="library"/>
		<zero:BasicProxy id="proxy" implementation="{library}"/>
		
	</fx:Declarations>
		
	<s:Button label="one" click="asdf()"/>
	<s:Button label="two" click="two()"/>
	<s:Button label="detach" click="listener.implementation = null"/>
	
</s:Application>